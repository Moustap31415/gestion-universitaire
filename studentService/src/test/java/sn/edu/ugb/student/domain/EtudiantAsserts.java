package sn.edu.ugb.student.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EtudiantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtudiantAllPropertiesEquals(Etudiant expected, Etudiant actual) {
        assertEtudiantAutoGeneratedPropertiesEquals(expected, actual);
        assertEtudiantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtudiantAllUpdatablePropertiesEquals(Etudiant expected, Etudiant actual) {
        assertEtudiantUpdatableFieldsEquals(expected, actual);
        assertEtudiantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtudiantAutoGeneratedPropertiesEquals(Etudiant expected, Etudiant actual) {
        assertThat(actual)
            .as("Verify Etudiant auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtudiantUpdatableFieldsEquals(Etudiant expected, Etudiant actual) {
        assertThat(actual)
            .as("Verify Etudiant relevant properties")
            .satisfies(a -> assertThat(a.getNumeroEtudiant()).as("check numeroEtudiant").isEqualTo(expected.getNumeroEtudiant()))
            .satisfies(a -> assertThat(a.getDateNaissance()).as("check dateNaissance").isEqualTo(expected.getDateNaissance()))
            .satisfies(a -> assertThat(a.getAdresse()).as("check adresse").isEqualTo(expected.getAdresse()))
            .satisfies(a -> assertThat(a.getFormationActuelle()).as("check formationActuelle").isEqualTo(expected.getFormationActuelle()))
            .satisfies(a -> assertThat(a.getUtilisateurId()).as("check utilisateurId").isEqualTo(expected.getUtilisateurId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtudiantUpdatableRelationshipsEquals(Etudiant expected, Etudiant actual) {
        // empty method
    }
}
