package sn.edu.ugb.grade.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EvaluationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationAllPropertiesEquals(Evaluation expected, Evaluation actual) {
        assertEvaluationAutoGeneratedPropertiesEquals(expected, actual);
        assertEvaluationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationAllUpdatablePropertiesEquals(Evaluation expected, Evaluation actual) {
        assertEvaluationUpdatableFieldsEquals(expected, actual);
        assertEvaluationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationAutoGeneratedPropertiesEquals(Evaluation expected, Evaluation actual) {
        assertThat(actual)
            .as("Verify Evaluation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationUpdatableFieldsEquals(Evaluation expected, Evaluation actual) {
        assertThat(actual)
            .as("Verify Evaluation relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getNoteMaximale()).as("check noteMaximale").isEqualTo(expected.getNoteMaximale()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a -> assertThat(a.getCoursId()).as("check coursId").isEqualTo(expected.getCoursId()))
            .satisfies(a -> assertThat(a.getSessionId()).as("check sessionId").isEqualTo(expected.getSessionId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationUpdatableRelationshipsEquals(Evaluation expected, Evaluation actual) {
        // empty method
    }
}
